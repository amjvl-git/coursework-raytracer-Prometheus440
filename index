
<!DOCTYPE html>
<html>

<body>

<canvas id="canvas" width="400" height="300" style="border:1px solid#000000;">
Your browser does not support the HTML canvas tag.
</canvas>

<script>

class Vec3
{
    constructor (x, y, z)
    {
        this.x = x
        this.y = y
        this.z = z
    }

    add(other)
    {
        return new Vec3(this.x + other.x, this.y + other.y, this.z + other.z)
    }

    minus(other)
    {
        return new Vec3(this.x - other.x, this.y - other.y, this.z - other.z)
    }

    multiply(other)
    {
        return new Vec3(this.x * other.x, this.y * other.y, this.z * other.z)
    }

    scale(scalar)
    {
        return new Vec3(this.x * scalar, this.y * scalar, this.z * scalar)
    }
    
    dot(other) 
    {
        return ((this.x * other.x) + (this.y * other.y) + (this.z * other.z))
    }

    magnitude() 
    {
        return Math.sqrt((this.x ** 2) + (this.y ** 2) + (this.z ** 2))
    }
    
    magnitudeSquared() 
    {
        return (this.x ** 2) + (this.y ** 2) + (this.z ** 2)
    }

    normalised() 
    {
        let magnitude = Math.sqrt((this.x ** 2) + (this.y ** 2) + (this.z ** 2))
        let scale = 1 / magnitude
        return new Vec3(this.x * scale, this.y * scale, this.z * scale)
    }
}

const v1 = new Vec3(1, 2, 3);
const v2 = new Vec3(4, 5, 6);
const scalar = 6.5;

console.log(v1.add(v2));
console.log(v1.minus(v2));
console.log(v1.multiply(v2));
console.log(v1.scale(scalar));
console.log(v1.dot(v2));
console.log(v1.magnitude());
console.log(v1.magnitudeSquared());
console.log(v1.normalised());

class Sphere
{
    constructor (centre, radius, colour)
    {
        this.centre = centre
        this.radius = radius
        this.colour = colour
    }

    rayIntersects(ray)
    {
        let oc = ray.origin.minus(this.centre)

        let a = ray.direction.dot(ray.direction)
        let b = (ray.direction.scale(2)).dot(oc)
        let c = (oc.dot(oc)) - (this.radius ** 2)

        let discriminant = (b ** 2) - (4 * a * c)

        if(discriminant < 0)
        {
            return -1
        }

        if(discriminant > 0)
        {
            return (-b - Math.sqrt(discriminant)) / (2 * a)
        }
    }
}

class Ray
{
    constructor (origin, direction)
    {
        this.origin = origin
        this.direction = direction
    }

    pointAt(t)
    {
       return this.origin.add(this.direction.scale(t)) 
    }
}

class RayCastResult
{
    constructor(position, normal, t, sphereIndex)
    {
        this.position = position
        this.normal = normal
        this.t = t
        this.sphereIndex = sphereIndex
    }
}

function hit(ray, t, sphereIndex)
{
    let intersectionPoint = ray.origin.add(ray.direction.scale(t))
    let intersectionNormal = intersectionPoint.minus(spheres[sphereIndex].centre).normalised()

    normal = ((ray.origin.add(ray.direction.scale(t))).minus(spheres[sphereIndex].centre)).normalised()

    return new RayCastResult(intersectionPoint, intersectionNormal, t, sphereIndex)
}

function miss()
{
    return new RayCastResult(new Vec3(0,0,0), new Vec3(0,0,0), -1, -1)
}

function traceRay(ray)
{
    let t = 1000000
    let closestSphereIndex = -1

    for (let i = 0; i < spheres.length; i++)
    {
        let current_t = spheres[i].rayIntersects(ray)
        if(current_t > 0 && current_t < t)
        {
            t = current_t
            closestSphereIndex = i
        }
    }

    if (closestSphereIndex < 0) return miss()
    return hit(ray, t, closestSphereIndex)
}

function backgroundColour(ray)
{
    let white = new Vec3(1, 1, 1)
    let blue = new Vec3(0.3, 0.5, 0.9)
    t = 0.5 * (ray.direction.y + 1.0)
    return white.scale(1-t).add(blue.scale(t))
}

let lightDirection = new Vec3(-1.1, -1.3, -1.5).normalised()
let negLightDirection = new Vec3(-lightDirection.x, -lightDirection.y, -lightDirection.z)

function rayColour(ray) 
{
    let castResult = traceRay(ray)
    if (castResult.t < 0) return backgroundColour(ray)

    let albedo = spheres[castResult.sphereIndex].colour
    let diffuse = Math.max(castResult.normal.dot(negLightDirection), 0)

    let m = 80
    let s_y = 0.5

    let r = castResult.normal.scale(2 * castResult.normal.dot(negLightDirection)).minus(negLightDirection).normalised()
    let v = camPosition.minus(castResult.position).normalised()
    let gamma = Math.pow(Math.max(v.dot(r), 0), m) * s_y

    let ambient = 0.05
    let specular = gamma * 0.8

    let shadowRay = new Ray(castResult.position, negLightDirection)
    let shadowHit = traceRay(shadowRay)
    
    if (shadowHit.t > 0)
    {
        shadowFactor = 0.4
    }
    else 
    {
        shadowFactor = 1.0
    }

    let colour = albedo.scale((ambient + diffuse + specular) * shadowFactor)
    return colour
}

function setPixel(x, y, colour)
{
    var c = document.getElementById("canvas")
    var ctx = c.getContext("2d")
    ctx.fillStyle = "rgba("+colour.x+","+colour.y+","+colour.z+","+1+")"
    ctx.fillRect(x, c.height - y, 1, 1)
}

const spheres = new Array(
    new Sphere(new Vec3(0,0,-1), 0.3, new Vec3(1,0,0)),
    new Sphere(new Vec3(0,0.2,-0.8), 0.15, new Vec3(0,0,1)),
    new Sphere(new Vec3(0,-100.5,-1), 100, new Vec3(0,1,0))
    );


// Main code
let imageWidth = document.getElementById("canvas").width
let imageHeight = document.getElementById("canvas").height
let aspectRatio = imageHeight / imageWidth

let colour = new Vec3(0,0,0)

let viewportWidth = 2
let viewportHeight = viewportWidth * aspectRatio
let focalLength = 1.0

let camPosition = new Vec3(0, 0, 0)
let horizontal = new Vec3(viewportWidth, 0, 0)
let vertical = new Vec3(0, viewportHeight, 0)
let lowerLeftCorner = camPosition.minus(horizontal.scale(0.5)).minus(vertical.scale(0.5)).minus(new Vec3(0, 0, focalLength))

for (let i = 0; i < imageWidth; i++)
{
    for (let j = 0; j <= imageHeight; j++)
    {
        let u = i / (imageWidth - 1)
        let v = j / (imageHeight - 1)
        let ray = new Ray(camPosition, lowerLeftCorner.add(horizontal.scale(u)).add(vertical.scale(v)).minus(camPosition))
        colour = rayColour(ray).scale(255)
        setPixel(i,j,colour)
    }
}

</script>

</body>
</html>
